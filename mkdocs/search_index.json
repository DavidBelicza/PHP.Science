{
    "docs": [
        {
            "location": "/", 
            "text": "PHP.Science\n\n\nPhpScience is a namespace in Composer package manager to provide solutions for unusual problems in PHP.", 
            "title": "Home"
        }, 
        {
            "location": "/#phpscience", 
            "text": "PhpScience is a namespace in Composer package manager to provide solutions for unusual problems in PHP.", 
            "title": "PHP.Science"
        }, 
        {
            "location": "/textrank/", 
            "text": "PHP.Science - TextRank\n\n\n\n\n\n\n\n\n\n\nThis source code is an implementation of the TextRank algorithm (Automatic summarization) on PHP7 strict mode. This package is also compatible with the HHVM engine in PHP7 mode, see the details below. It can summarize a text, article for example to a short paragraph. Before it would start the summarizing it removes the junk words what are defined in the Stopwords namespace. It is possible to extend it with another languages.\n\n\nTextRank or Automatic summarization\n\n\n\n\nAutomatic summarization is the process of reducing a text document with a computer program in order to create a summary that retains the most important points of the original document. Technologies that can make a coherent summary take into account variables such as length, writing style and syntax. Automatic data summarization is part of machine learning and data mining. The main idea of summarization is to find a representative subset of the data, which contains the information of the entire set. Summarization technologies are used in a large number of sectors in industry today. - Wikipedia\n\n\n\n\nThe algorithm of this implementation is:\n\n Find sentences,\n\n Remove stopwords,\n\n Create integer values by find and count the matching words,\n\n Change the integer values by the related words' integer values,\n\n Normalize values to create scores,\n\n Order by scores\n\n\nInstall\n\n\ncomposer require php-science/textrank\n\n\n\n\n\nTest with PHP7\n\n\ncd project-folder\ncomposer test\n\n\n\n\n\nor\n\n\ncd project-folder\nphpunit --colors=\nalways\n $(pwd)/tests\n\n\n\n\n\nTest with HHVM\n\n\ncd project-folder\ncomposer test-hhvm\n\n\n\n\n\nor\n\n\ncd project-folder\nhhvm -d hhvm.php7.scalar_types=true /usr/local/bin/phpunit --colors=\nalways\n $(pwd)/tests\n\n\n\n\n\nExamples\n\n\n?php\n\n\n\nuse\n \nPhpScience\\TextRank\\Tool\\StopWords\\English\n;\n\n\n\n// String contains a long text, see the /res/sample1.txt file.\n\n\n$text\n \n=\n \nLorem ipsum...\n;\n\n\n\n$api\n \n=\n \nnew\n \nTextRankFacade\n();\n\n\n// English implementation for stopwords/junk words:\n\n\n$stopWords\n \n=\n \nnew\n \nEnglish\n();\n\n\n$api\n-\nsetStopWords\n(\n$stopWords\n);\n\n\n\n// Array of the most important keywords:\n\n\n$result\n \n=\n \n$api\n-\ngetOnlyKeyWords\n(\n$text\n);\n \n\n\n// Array of the sentences from the most important part of the text:\n\n\n$result\n \n=\n \n$api\n-\ngetHighlights\n(\n$text\n);\n \n\n\n// Array of the most important sentences from the text:\n\n\n$result\n \n=\n \n$api\n-\nsummarizeTextBasic\n(\n$text\n);\n\n\n\n\n\n\nMore examples: \non GitHub", 
            "title": "Text Rank"
        }, 
        {
            "location": "/textrank/#phpscience-textrank", 
            "text": "This source code is an implementation of the TextRank algorithm (Automatic summarization) on PHP7 strict mode. This package is also compatible with the HHVM engine in PHP7 mode, see the details below. It can summarize a text, article for example to a short paragraph. Before it would start the summarizing it removes the junk words what are defined in the Stopwords namespace. It is possible to extend it with another languages.", 
            "title": "PHP.Science - TextRank"
        }, 
        {
            "location": "/textrank/#textrank-or-automatic-summarization", 
            "text": "Automatic summarization is the process of reducing a text document with a computer program in order to create a summary that retains the most important points of the original document. Technologies that can make a coherent summary take into account variables such as length, writing style and syntax. Automatic data summarization is part of machine learning and data mining. The main idea of summarization is to find a representative subset of the data, which contains the information of the entire set. Summarization technologies are used in a large number of sectors in industry today. - Wikipedia   The algorithm of this implementation is:  Find sentences,  Remove stopwords,  Create integer values by find and count the matching words,  Change the integer values by the related words' integer values,  Normalize values to create scores,  Order by scores", 
            "title": "TextRank or Automatic summarization"
        }, 
        {
            "location": "/textrank/#install", 
            "text": "composer require php-science/textrank", 
            "title": "Install"
        }, 
        {
            "location": "/textrank/#test-with-php7", 
            "text": "cd project-folder\ncomposer test  or  cd project-folder\nphpunit --colors= always  $(pwd)/tests", 
            "title": "Test with PHP7"
        }, 
        {
            "location": "/textrank/#test-with-hhvm", 
            "text": "cd project-folder\ncomposer test-hhvm  or  cd project-folder\nhhvm -d hhvm.php7.scalar_types=true /usr/local/bin/phpunit --colors= always  $(pwd)/tests", 
            "title": "Test with HHVM"
        }, 
        {
            "location": "/textrank/#examples", 
            "text": "?php  use   PhpScience\\TextRank\\Tool\\StopWords\\English ;  // String contains a long text, see the /res/sample1.txt file.  $text   =   Lorem ipsum... ;  $api   =   new   TextRankFacade ();  // English implementation for stopwords/junk words:  $stopWords   =   new   English ();  $api - setStopWords ( $stopWords );  // Array of the most important keywords:  $result   =   $api - getOnlyKeyWords ( $text );   // Array of the sentences from the most important part of the text:  $result   =   $api - getHighlights ( $text );   // Array of the most important sentences from the text:  $result   =   $api - summarizeTextBasic ( $text );   More examples:  on GitHub", 
            "title": "Examples"
        }
    ]
}